#!/bin/bash

### Helper functions
function server() {
  if [[ -z $1 ]]; then
    PORT=8000
  else
    PORT="$1"
  fi

  chromium-browser  "http://localhost:$PORT" &
  python -m SimpleHTTPServer $PORT
}

# Compute gzip size of file
function gsize() {
  if [[ -z $1 ]]; then
    exit 1
  fi

  gzip -c "$1" | wc -c
}

# A bash function to display a growl notification using iTerm's magic
# escape sequence. This version will work under screen.
growl() {
  local msg="\\e]9;\n\n${*}\\007"
  case $TERM in
    screen*)
      echo -ne '\eP'${msg}'\e\\' ;;
    *)
      echo -ne ${msg} ;;
  esac
  return
}

# Fixes that fucking annoying coreaudio breakdown
fuckingairplay() {
  sudo kill `ps -ax | grep 'coreaudiod' | grep 'sbin' |awk '{print $1}'`
}

fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    fg
    zle redisplay
  else
    zle push-input
    zle clear-screen
  fi
}

zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

# Create a directory and cd into it
mkdircd() {
  mkdir "$1" && cd $_
}

# unregister broken GHC packages. Run this a few times to resolve dependency rot in installed packages.
# ghc-pkg-clean -f cabal/dev/packages*.conf also works.
function ghc-pkg-clean() {
  for p in `ghc-pkg check $* 2>&1  | grep problems | awk '{print $6}' | sed -e 's/:$//'`
  do
    echo unregistering $p; ghc-pkg $* unregister $p
  done
}
 
# remove all installed GHC/cabal packages, leaving ~/.cabal binaries and docs in place.
# When all else fails, use this to get out of dependency hell and start over.
function ghc-pkg-reset() {
  if [[ $(readlink -f /proc/$$/exe) =~ zsh ]]; then
    read 'ans?Erasing all your user ghc and cabal packages - are you sure (y/N)? '
  else # assume bash/bash compatible otherwise
    read -p 'Erasing all your user ghc and cabal packages - are you sure (y/N)? ' ans
  fi
 
  [[ x$ans =~ "xy" ]] && ( \
    echo 'erasing directories under ~/.ghc'; command rm -rf `find ~/.ghc/* -maxdepth 1 -type d`; \
    echo 'erasing ~/.cabal/lib'; command rm -rf ~/.cabal/lib; \
  )
}

# Homesick commit && push
function hs {
  homesick commit && homesick push
}

# Codi
# Usage: codi [filetype] [filename]
function codi {
  local syntax="${1:-python}"
  shift
  nvim -c \
    "set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

# fzf vim
function fz {
  local files=`fzf-tmux -m --black`
  if [[ $? -eq 0 ]] && [[ -n $files ]]; then
    vim $files
  fi
}

# fzf search history
function h() {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf --black +s --tac | sed 's/ *[0-9]* *//')
}

function zv() {
  local file
  file="$(fasd -Rfl "$1" | fzf -1 -0 --no-sort +m)" && vim "${file}" || return 1
}

alias cabalupgrades="cabal list --installed  | egrep -iv '(synopsis|homepage|license)'"
